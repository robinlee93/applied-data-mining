x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()
return(p)
}
table2stacked(NApattern, 10)
table2stacked(NApattern, 3)
for(i in 1:length(NApattern)){
table2stacked(NApattern, i)
}
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
plots = list()
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "In variable ",var,
", distribution of missing values across outcomes"
,sep=""),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()
return(p)
}
plots = list()
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
multiplot(plotlist = plots, cols = 5)
install.packages("RMisc")
install.packages("Rmisc")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("gridExtra")
library(gridExtra)
plots = list()
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
multiplot(plotlist = plots, cols = 5)
library(ggplot2)
plots = list()
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
multiplot(plotlist = plots, cols = 5)
library(Rmisc)
multiplot(plotlist = plots, cols = 5)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "In variable ",var,
", distribution of missing values across outcomes"
,sep=""),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()
return(p)
}
plots = list()
for(i in 1:length(NApattern)){
plots[i] = table2stacked(NApattern, i)
}
multiplot(plotlist = plots, cols = 5)
?multiplot
multiplot(plotlist = plots, cols = 5)
for(i in 1:5){
plots[i] = table2stacked(NApattern, i)
}
for(i in 1:5){
plots[i] = table2stacked(NApattern, i)
}
plots = list()
for(i in 1:5){
plots[i] = table2stacked(NApattern, i)
}
plots[1]
plots[1]
table2stacked(NApattern, 2)
for(i in 1:5){
p = table2stacked(NApattern, i)
plots[i] = p
}
plots = list()
for(i in 1:5){
p = table2stacked(NApattern, i)
plots[i] = p
}
plots[1]
multiplot(plotlist = plots, cols = 5)
for(i in 1:5){
paste("p",i,sep="") = table2stacked(NApattern, i)
}
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[1] = p
}
plot_list = list()
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[1] = p
}
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked(NApattern, 2)
for(i in 1:19){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "In variable ",var,
", distribution of missing values across outcomes"
,sep=""),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()+
theme(legend.position="none")
return(p)
}
plot_list = list()
length(NApattern)
for(i in 1:19){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "In variable ",var,
", distribution of missing values across outcomes"
,sep=""),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()+
theme(legend.position="none")+
scale_x_discrete(breaks=NULL)
return(p)
}
library(ggplot2)
library(gridExtra)
library(Rmisc)
p1 = qplot(1:10, rnorm(10))
p2 = qplot(1:10, rnorm(10))
grid.arrange(p1, p2, ncol = 2, main = "Main title")
plot_list = list()
length(NApattern)
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "Variable ",var),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values in variable", var))
)+
theme_classic()+
theme(legend.position="none")+
scale_x_discrete(breaks=NULL)
return(p)
}
library(ggplot2)
library(gridExtra)
plot_list = list()
length(NApattern)
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "Variable ",var),
x = ("Different types of Soybean"),
y = (paste("Frequency of missing values"))
)+
theme_classic()+
theme(legend.position="none")+
scale_x_discrete(breaks=NULL)
return(p)
}
library(ggplot2)
library(gridExtra)
plot_list = list()
length(NApattern)
for(i in 1:5){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
table2stacked = function(NApattern,i){
var = names(NApattern[i])
table1 = NApattern[i][[1]]
df = as.data.frame(table1)
df[,"class"] = rownames(df)
# wide to long, because it's easier to plot
library(reshape2)
df3 = melt(df)
names(df3) = c("class","response", "frequency")
levels(df3$response)[!is.na(levels(df3$response))] <- "non-missing"
df3$response = addNA(df3$response)
levels(df3$response)[is.na(levels(df3$response))] <- "missing"
p = ggplot(df3, aes(x = class, y = frequency, fill = response))+
geom_bar(stat = "identity")+
scale_fill_manual(values=c("#56B4E9", "#D55E00", "grey"))+
coord_flip()+
labs(title=paste( "Variable ",var),
x = ("Types of Soybean"),
y = (paste("Frequency of missing values"))
)+
theme_classic()+
theme(legend.position="none")+
scale_x_discrete(breaks=NULL)
return(p)
}
library(ggplot2)
library(gridExtra)
plot_list = list()
length(NApattern)
for(i in 1:19){
p = table2stacked(NApattern, i)
plot_list[[i]] = p
}
grid.arrange(grobs = plot_list, ncol=4)
install.packages("AppliedPredictiveModeling")
library(caret)
library(MASS)
data("Boston")
head(Boston)
train_index <- createDataPartition(Boston$medv, p = 2/3,
list = FALSE, times = 1)
train <- Boston[train_index, ]
test <- Boston[-train_index, ]
sset.seed(569)
set.seed(569)
train_index <- createDataPartition(Boston$medv, p = 2/3,
list = FALSE, times = 1)
train <- Boston[train_index, ]
test <- Boston[-train_index, ]
m1 <- lm(data = train, medv ~ )
m1 <- lm(data = train, medv ~ .)
control <- trainControl( # 10 fold CV, repeated 10 times
method = 'repeatedcv', number = 10, repeats = 10
)
lm <- train(medv ~ . , data = train,
method = "lm",
trControl = control)
lm
str(lm)
lm
lm$RMSE
lm1 <- train(medv ~ . , data = train,
method = "lm",
trControl = control)
lm_test <- predict(lm1, test)
lm1
lm_test
lm1
RMSE(lm_test)
?RMSE
lm_test
dim(lm_test)
length(lm_test)
length(test$medv)
?RMSE
RMSE(lm_test, test$medv)
Rsquared(lm_test, test$medv)
?RMSE
postResample(lm_test, test$medv)
lm1
lm_train <- predict(lm1, train)
postResample(lm_train, test$medv)
lm1
lasso1 <- train(medv ~ . , data = train,
method = "lasso",
trControl = control)
lasso1
lasso_test <- predict(lasso1, test)
postResample(lasso_test, test$medv)
?train
getModelInfo()
names(getModelInfo())
enet1 <- train(medv ~ . , data = train,
method = "enet",
trControl = control)
enet1
enet1$metric
enet1
str(enet1)
enet1
postResample(enet_test, test$medv)
enet_test <- predict(enet1, test)
postResample(enet_test, test$medv)
pls1 <- train(medv ~ . , data = train,
method = "pls",
trControl = control)
pls1
pls_test <- predict(pls1, test)
postResample(pls_test, test$medv)
nnet1 <- train(medv ~ . , data = train,
method = "nnet",
trControl = control)
nnet1
nnet_test <- predict(nnet1, test)
postResample(nnet_test, test$medv)
mars1 <- train(medv ~ . , data = train,
method = "earth",
trControl = control)
mars1
mars_test <- predict(mars1, test)
postResample(mars_test, test$medv)
svm1 <- train(medv ~ . , data = train,
method = "svm",
trControl = control)
svm1
svm1 <- train(medv ~ . , data = train,
method = "e1071",
trControl = control)
svm1 <- train(medv ~ . , data = train,
method = "svmRadial",
trControl = control)
svm1
svm_test <- predict(svm1, test)
postResample(svm_test, test$medv)
knn1 <- train(medv ~ . , data = train,
method = "knn",
trControl = control)
knn1
knn_test <- predict(knn1, test)
postResample(knn_test, test$medv)
ridge1 <- train(medv ~ age + age, data = train, method = 'ridge',
trControl = control)
ridge1 <- train(medv ~ age + age, data = train,
method = 'ridge',
trControl = control)
ridge1 <- train(medv ~ age , data = train,
method = 'ridge',
trControl = control)
warnings()
ridge1 <- train(medv ~ . , data = train,
method = 'ridge',
trControl = control)
ridge1
ridge2 <- train(medv ~ . + age, data = train,
method = 'ridge',
trControl = control)
ridge2
ridge1$finalModel
ridge2$finalModel
lm1$finalModel
ridge2$coefficients
ridgem <- lm.ridge(medv ~ age+age, data = train)
ridgem <- lm.ridge(medv ~ age + . , data = train)
ridgem
ridgem <- lm.ridge(medv ~ age + age. , data = train)
ridgem <- lm.ridge(medv ~ age + age + . , data = train)
ridgem
train_add <- train
train_add$age2 <- train_add$age
ridgem2 <- lm.ridge(medv ~ ., data = train)
ridgem2
ridgem2 <- lm.ridge(medv ~ ., data = train_add)
ridgem2
ridgem$age/ridgem2$age
ridgem$age
ridgem <- lm.ridge(medv ~ age + age  , data = train)
ridgem2
ridgem
ridgem2 <- lm.ridge(medv ~ age +., data = train_add)
ridgem2
ridgem <- lm.ridge(medv ~ age + age + . , data = train)
ridgem
ridge1 <- train(medv ~ . , data = train,
method = "ridge",
trControl = control)
ridge1
ridge2 <- train(medv ~ age +. , data = train,
method = "ridge",
trControl = control)
ridge2
ridge2 <- train(medv ~ age +. , data = train_add,
method = "ridge",
trControl = control)
ridge2
ridge2$finalModel
?train
ridgem <- lm.ridge(medv ~ age + age + . , data = train)
ridgem
train_add <- train
train_add$age2 <- train_add$age
ridgem2 <- lm.ridge(medv ~ age +., data = train_add)
ridgem2
ridgem
ridgem <- lm.ridge(medv ~  . , data = train)
ridgem
train_add <- train
train_add$age2 <- train_add$age
ridgem2 <- lm.ridge(medv ~ age +., data = train_add)
ridgem2
ridgem <- lm.ridge(medv ~  age , data = train)
ridgem
ridgem2 <- lm.ridge(medv ~ age + age2, data = train_add)
ridgem2
ridgem <- lm.ridge(medv ~  age , data = train)
train[1,]
str(train)
ridgem <- lm.ridge(medv ~  age , data = train)
ridgem <- lm.ridge(medv ~ 1+ age , data = train)
ridgem <- lm(medv ~ age , data = train)
ridgem
ridgem2
str(ridgem2)
ridgem2$coef
